# -*-coding:utf-8-*-
"""
1. 什么是函数？
    在程序中，函数就是具备某一个功能的工具，并实现准备好
2. 为什么要用函数？
   程序冗长、程序扩展、程序可读性
3. 如何使用函数
   定义： def 函数名+括号+冒号
   ### 缩进+代码体
4. 函数调用
   函数名+括号
"""


# 案例，制造一个工厂
def factory():
    print("这是一个工厂，正在生产一个手机")


factory()  # 函数的调用

'''
函数的三大特性
功能、参数、返回值
'''


#无代码，防止报错,一般用于测试
def shopping():
    pass  # 无代码，也不会报错


# 参数， 无参函数
# 只是执行一些操作，不需要外界资源

# 有参函数： 需要根据外部传进来的参数，才能执行相应的逻辑计算等
def factory(a, b):
    # 行参数： 只在定义函数阶段内指定的变量名， 形参可以看做一个变量名
    print('a is %s' % a)
    print('a is %s' % b)


factory('haha', 2)

# 实参： 在调用函数阶段括号内传入的值
# 调用函数参数称为实参
# 形参和实参的关系： 在调用函数时，会将实参传递给形参； 按照位置定义的形参，必须被实参传值

# 位置参数： 在调用阶段，按照key=value 传递参数
factory(a=1, b='y')
factory(2, b='y')

# 默认参数
'''
 值在定义函数阶段，就已经为某个形参赋值了， 改形参称之为有默认值的形参
 注意： 
 在定义阶段就已经被赋值，在调用阶段可以不用为其赋值
 位置形参应该放到默认形参前面
 默认形参的值在函数定义阶段就已经固定死了
'''


def params(a, b=2):
    c = a + b
    print(c)


params(1, 6)
params(2)

'''
位置形参VS默认形参
1. 大多数情况下传的值都是不相同的，定义为位置形参
2. 大多数情况传的值是相同的，就可以定义默认形参
'''

# 可变长度参数
'''
在形参中带* ， 会将调用函数时一处的位置实参保存成元组的形式，然后赋值*后面的变量名
'''


def foo(x, y, *z):
    print(x, y)
    print(*z)


foo(1, 2, 3, 4, 5, 6)

# 实参打散, 序列类型可以被打散
foo(1, *(2, 3, 4))
foo(1, *[2, 3, 4, 5])
print(type(3))  # int
print(type(3, ))  # 元组
# 字符串打算
foo(*'abc')


# 在形参中带** 将会调用函数时一处关键字实参保存为字典形式，然后赋值**后的变量名
def foo(x, y, **z):
    print(x, y)
    print(z)  # 这里没有打散**z,不能独立打散


# ** 只接收关键字实参


#foo(1, 2,3) 错误
foo(1, 2, a=1, c=3, d=5)
# 打散字典， 实参可以打散字典变为关键字进行传参数
foo(1, 2, **{'a': 1, "b": 22, 'c': 33})


# 规范： 在形参中带* 与 ** ， * 后的变量名应该为args, ** 后的变量名应该为kwargs

def factory(*args, **kwargs):
    print(args)
    print(kwargs)


factory(1, 2, 3, x=1, y=2)


# 命名关键字参数，放在* 与 ** 之间的参数称为 关键字 ***

def foo(x, y, *args, m, n, **kwargs):  # 中间的m, n， 必须包含在实参传递中
    print(x)
    print(y)
    print(m, n)
    print(kwargs)


foo(1, 2, 3, 4, m='a', n='b', **{'h': 1, 'e': 2})



